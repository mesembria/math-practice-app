This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/*.test.tsx
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
assets/
  react.svg
components/
  Exercise/
    Exercise.tsx
  LandingPage/
    LandingPage.tsx
  NumericKeyboard/
    NumericKeyboard.tsx
  ProblemDisplay/
    ProblemDisplay.tsx
  ProgressIndicator/
    ProgressIndicator.tsx
  SessionSummary/
    utils/
      calculations.ts
      formatters.ts
    MasteryGrid.tsx
    PerformanceInsights.tsx
    ProblemList.tsx
    SessionSummary.tsx
    StatsSummary.tsx
context/
  ExerciseContext/
    ExerciseContext.tsx
    types.ts
    useExercise.ts
services/
  api.ts
test/
  setup.ts
types/
  index.ts
App.css
App.tsx
index.css
main.tsx
vite-env.d.ts

================================================================
Files
================================================================

================
File: assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: components/Exercise/Exercise.tsx
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import ProblemDisplay from '../ProblemDisplay/ProblemDisplay';
import NumericKeyboard from '../NumericKeyboard/NumericKeyboard';
import ProgressIndicator from '../ProgressIndicator/ProgressIndicator';
import SessionSummary from '../SessionSummary/SessionSummary';
import { api, SessionSummary as SessionSummaryType } from '../../services/api';

interface Problem {
  problemId: number;
  factor1: number;
  factor2: number;
}

const Exercise: React.FC = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const navigate = useNavigate();
  const [currentProblem, setCurrentProblem] = useState<Problem | null>(null);
  const [currentAnswer, setCurrentAnswer] = useState('0');
  const [results, setResults] = useState<Array<boolean | null>>([]);
  const [isComplete, setIsComplete] = useState(false);
  const [sessionSummary, setSessionSummary] = useState<SessionSummaryType | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [startTime, setStartTime] = useState<number>(0);
  const [totalProblems, setTotalProblems] = useState(0);

  // Fetch session and first problem on mount
  useEffect(() => {
    const fetchSessionAndProblem = async () => {
      try {
        if (!sessionId) {
          throw new Error('No session ID provided');
        }
        
        const parsedSessionId = parseInt(sessionId);
        const [session, problem] = await Promise.all([
          api.getSession(parsedSessionId),
          api.getNextProblem(parsedSessionId)
        ]);
        
        setTotalProblems(session.total_problems);
        setResults(new Array(session.total_problems).fill(null));
        setCurrentProblem(problem);
        setStartTime(Date.now());
        setIsLoading(false);
      } catch (err: unknown) {
        console.error('Error fetching session or problem:', err);
        setError('Failed to load exercise session. Please try again.');
        setIsLoading(false);
      }
    };

    fetchSessionAndProblem();
  }, [sessionId]);

  // Handle answer submission
  const handleNext = async () => {
    if (!currentProblem || !sessionId) return;

    const responseTimeMs = Date.now() - startTime;
    
    try {
      const result = await api.submitAttempt(
        parseInt(sessionId),
        currentProblem.problemId,
        parseInt(currentAnswer),
        responseTimeMs
      );

      // Update results at current index
      const newResults = [...results];
      const currentIndex = newResults.findIndex(r => r === null);
      if (currentIndex !== -1) {
        newResults[currentIndex] = result.isCorrect;
        setResults(newResults);
      }

      if (result.isSessionComplete && result.sessionSummary) {
        setIsComplete(true);
        setSessionSummary(result.sessionSummary);
      } else {
        // Fetch next problem
        const nextProblem = await api.getNextProblem(parseInt(sessionId));
        setCurrentProblem(nextProblem);
        setCurrentAnswer('0');
        setStartTime(Date.now());
      }
    } catch (err: unknown) {
      console.error('Error submitting attempt:', err);
      setError('Failed to submit answer. Please try again.');
    }
  };

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[600px] gap-4">
        <p className="text-xl text-red-600">{error}</p>
        <button
          onClick={() => navigate('/')}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Return to Home
        </button>
      </div>
    );
  }

  if (isLoading || !currentProblem) {
    return (
      <div className="flex items-center justify-center min-h-[600px]">
        <p className="text-xl text-gray-600">Loading problems...</p>
      </div>
    );
  }

  if (isComplete && sessionSummary) {
    return (
      <div className="flex flex-col items-center min-h-[600px] gap-8 p-4">
        <h2 className="text-2xl font-bold text-gray-800">
          Exercise Complete!
        </h2>
        <SessionSummary summary={sessionSummary} />
        <button
          onClick={() => navigate('/')}
          className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
        >
          Start New Session
        </button>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-[600px] gap-4 p-4">
      <ProgressIndicator
        totalProblems={totalProblems}
        currentProblemIndex={results.findIndex(r => r === null) === -1 ? totalProblems - 1 : results.findIndex(r => r === null)}
        results={results}
        className="w-full max-w-4xl h-3"
      />
      
      <div className="flex flex-col items-center gap-6 w-full max-w-2xl">
        <ProblemDisplay
          factor1={currentProblem.factor1}
          factor2={currentProblem.factor2}
          answer={currentAnswer}
          className="w-full min-h-[120px] text-5xl md:text-6xl"
        />

        <div className="flex gap-2 w-full max-w-md">
          <NumericKeyboard
            value={currentAnswer}
            onChange={setCurrentAnswer}
            onSubmit={currentAnswer !== '0' ? handleNext : undefined}
            maxLength={3}
            className="flex-1"
          />
          
          <button
            onClick={handleNext}
            disabled={currentAnswer === '0'}
            aria-label="Next"
            className={`
              w-20 rounded-xl text-xl font-semibold p-3
              transition-colors duration-150 flex items-center justify-center
              h-[calc(48px*4+0.5rem*3+1.5rem*2)] sm:h-[calc(56px*4+0.5rem*3+1.5rem*2)] md:h-[calc(64px*4+0.5rem*3+1.5rem*2)]
              ${currentAnswer === '0'
                ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                : 'bg-blue-500 text-white hover:bg-blue-600 active:bg-blue-700'}
            `}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-8 w-8"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 5l7 7-7 7"
              />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

export default Exercise;

================
File: components/LandingPage/LandingPage.tsx
================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { api } from '../../services/api';

interface User {
  id: number;
  name: string;
  is_parent: boolean;
}

const LandingPage: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [selectedUserId, setSelectedUserId] = useState<number | ''>('');
  const [numberOfProblems, setNumberOfProblems] = useState<number>(10);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const fetchedUsers = await api.getUsers();
        setUsers(fetchedUsers);
        setIsLoading(false);
      } catch (err: unknown) {
        console.error('Error fetching users:', err);
        setError('Failed to load users. Please try again.');
        setIsLoading(false);
      }
    };

    fetchUsers();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedUserId) {
      setError('Please select a user');
      return;
    }

    try {
      const session = await api.createSession(Number(selectedUserId), numberOfProblems);
      navigate(`/exercise/${session.id}`);
      } catch (err: unknown) {
        console.error('Error creating session:', err);
      setError('Failed to start exercise session. Please try again.');
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-xl text-gray-600">Loading...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
      <div className="bg-white rounded-xl shadow-lg p-8 max-w-md w-full">
        <h1 className="text-3xl font-bold text-gray-800 mb-6 text-center">
          Math Practice
        </h1>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="user" className="block text-sm font-medium text-gray-700 mb-2">
              Select User
            </label>
            <select
              id="user"
              value={selectedUserId}
              onChange={(e) => setSelectedUserId(e.target.value ? Number(e.target.value) : '')}
              className="block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">Choose a user</option>
              {users.map((user) => (
                <option key={user.id} value={user.id}>
                  {user.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label htmlFor="problems" className="block text-sm font-medium text-gray-700 mb-2">
              Number of Problems
            </label>
            <input
              type="number"
              id="problems"
              min="1"
              max="50"
              value={numberOfProblems}
              onChange={(e) => setNumberOfProblems(Math.max(1, Math.min(50, Number(e.target.value))))}
              className="block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors duration-200"
          >
            Start Practice
          </button>
        </form>
      </div>
    </div>
  );
};

export default LandingPage;

================
File: components/NumericKeyboard/NumericKeyboard.tsx
================
import React, { useCallback, useEffect } from 'react';

interface NumericKeyboardProps {
  value: string;
  onChange: (value: string) => void;
  onSubmit?: () => void;
  maxLength?: number;
  className?: string;
}

const NumericKeyboard: React.FC<NumericKeyboardProps> = ({
  value,
  onChange,
  onSubmit,
  maxLength,
  className = '',
}) => {
  const handleInput = useCallback((input: string) => {
    // Handle backspace
    if (input === 'backspace') {
      if (value === '0' || value.length <= 1) {
        onChange('0');
      } else {
        onChange(value.slice(0, -1));
      }
      return;
    }

    // Don't exceed maxLength
    if (maxLength && value.length >= maxLength) {
      return;
    }

    // Handle digit input
    if (value === '0') {
      if (input === '0') {
        return; // Prevent multiple leading zeros
      }
      onChange(input); // Replace initial zero
    } else {
      onChange(value + input); // Append digit
    }
  }, [value, onChange, maxLength]);

  // Handle keyboard input
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key >= '0' && e.key <= '9') {
        handleInput(e.key);
      } else if (e.key === 'Backspace') {
        handleInput('backspace');
      } else if (e.key === 'Enter' && onSubmit) {
        onSubmit();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [handleInput, onSubmit]);

  const buttons = [
    ['7', '8', '9'],
    ['4', '5', '6'],
    ['1', '2', '3'],
    ['0', 'backspace']
  ];

  const baseButtonStyles = `
    flex items-center justify-center
    text-2xl font-bold
    rounded-xl
    transition-colors duration-150
    focus:outline-none focus:ring-2 focus:ring-blue-400
    active:scale-95
    touch-manipulation
    select-none
    h-12 sm:h-14 md:h-16
  `;

  const numberButtonStyles = `
    bg-blue-100 hover:bg-blue-200
    text-blue-900
    active:bg-blue-300
  `;

  const backspaceButtonStyles = `
    bg-red-100 hover:bg-red-200
    text-red-900
    active:bg-red-300
    col-span-2
  `;

  return (
    <div 
      className={`grid grid-cols-3 gap-2 p-3 bg-white rounded-2xl shadow-lg ${className}`}
      role="group"
      aria-label="Numeric keyboard"
    >
      {buttons.map((row, rowIndex) => (
        <React.Fragment key={rowIndex}>
          {row.map((digit) => (
            <button
              key={digit}
              onClick={() => handleInput(digit)}
              className={`
                ${baseButtonStyles}
                ${digit === 'backspace' ? backspaceButtonStyles : numberButtonStyles}
                text-lg sm:text-xl md:text-2xl
              `}
              aria-label={digit === 'backspace' ? 'Backspace' : `Number ${digit}`}
              role={digit === 'backspace' ? 'button' : 'spinbutton'}
            >
              {digit === 'backspace' ? (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M3 12l6.414-6.414a2 2 0 012.828 0L21 14"
                  />
                </svg>
              ) : (
                digit
              )}
            </button>
          ))}
        </React.Fragment>
      ))}
    </div>
  );
};

export default NumericKeyboard;

================
File: components/ProblemDisplay/ProblemDisplay.tsx
================
import React from 'react';

interface ProblemDisplayProps {
  factor1: number;
  factor2: number;
  answer: string;
  className?: string;
}

const ProblemDisplay: React.FC<ProblemDisplayProps> = ({ 
  factor1, 
  factor2,
  answer,
  className = '' 
}) => {
  // Validate prop ranges
  if (factor1 < 2 || factor1 > 10 || factor2 < 2 || factor2 > 10) {
    throw new Error('Factors must be between 2 and 10');
  }

  return (
    <div 
      className={`
        flex items-center justify-center
        min-h-[200px] w-full
        bg-white rounded-lg shadow-sm
        ${className}
      `}
      role="region"
      aria-label="multiplication problem"
    >
      <p 
        className={`
          font-semibold text-gray-800 tracking-wide font-['Arial']
          ${className.includes('text-') ? '' : 'text-5xl md:text-6xl'}
        `}
      >
        <span className="inline-block min-w-[1.5ch] text-center">{factor1}</span>
        <span className="mx-4 text-gray-600"> × </span>
        <span className="inline-block min-w-[1.5ch] text-center">{factor2}</span>
        <span className="mx-4">=</span>
        <span className="inline-block min-w-[3ch] text-center text-blue-600">
          {answer !== '0' ? answer : ''}
        </span>
      </p>
    </div>
  );
};

export default ProblemDisplay;

================
File: components/ProgressIndicator/ProgressIndicator.tsx
================
import React from 'react';
import clsx from 'clsx';

interface ProgressIndicatorProps {
  totalProblems: number;
  currentProblemIndex: number;
  results: Array<boolean | null>;
  isRetry?: boolean;
  className?: string;
}

const ProgressIndicator: React.FC<ProgressIndicatorProps> = ({
  totalProblems,
  currentProblemIndex,
  results,
  isRetry = false,
  className = '',
}) => {
  // Validate and normalize inputs
  const normalizedIndex = Math.max(0, Math.min(currentProblemIndex, totalProblems - 1));
  const normalizedResults = results.slice(0, totalProblems);
  while (normalizedResults.length < totalProblems) {
    normalizedResults.push(null);
  }

  return (
    <div
      className={clsx(
        'flex justify-center w-full gap-0',
        className
      )}
      role="progressbar"
      aria-valuemin={0}
      aria-valuemax={totalProblems}
      aria-valuenow={currentProblemIndex + 1}
      aria-label={`Problem ${currentProblemIndex + 1} of ${totalProblems}`}
    >
      <div className="flex w-full max-w-3xl">
        {normalizedResults.map((result, index) => {
          const isCurrent = index === normalizedIndex;
          const baseColors = {
            null: 'bg-gray-200',
            true: 'bg-green-500',
            false: 'bg-red-500',
          };
          const retryColors = {
            null: 'bg-gray-100',
            true: 'bg-green-300',
            false: 'bg-red-300',
          };
          
          const colors = isRetry ? retryColors : baseColors;
          
          return (
            <div
              key={index}
              className={clsx(
                'aspect-square w-full min-w-[24px] transition-colors',
                colors[`${result}`],
                isCurrent && 'ring-2 ring-blue-500 ring-inset',
                // Add subtle patterns for colorblind accessibility
                result === true && 'bg-[url("data:image/svg+xml,%3Csvg width=\'20\' height=\'20\' viewBox=\'0 0 20 20\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath d=\'M0 0h20v20H0V0zm2 2v16h16V2H2z\' fill=\'rgba(255,255,255,0.1)\'/%3E%3C/svg%3E")]',
                result === false && 'bg-[url("data:image/svg+xml,%3Csvg width=\'20\' height=\'20\' viewBox=\'0 0 20 20\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath d=\'M0 0l20 20M20 0L0 20\' stroke=\'rgba(255,255,255,0.1)\' stroke-width=\'2\'/%3E%3C/svg%3E")]'
              )}
              role="status"
              aria-label={
                isCurrent
                  ? `Current problem ${index + 1}`
                  : `Problem ${index + 1}: ${
                      result === null
                        ? 'not attempted'
                        : result
                        ? 'correct'
                        : 'incorrect'
                    }`
              }
            />
          );
        })}
      </div>
    </div>
  );
};

export default ProgressIndicator;

================
File: components/SessionSummary/utils/calculations.ts
================
import { SessionSummary } from "@/services/api";


export interface SessionStats {
  correctCount: number;
  totalCount: number;
  correctPercentage: number;
  avgResponseTime: number;
  fastestTime: number;
  slowestTime: number;
  needsMostPractice: string;
}

/**
 * Calculate summary statistics from session data
 */
export const calculateSessionStats = (summary: SessionSummary): SessionStats => {
  const correctCount = summary.attempts.filter(a => a.isCorrect).length;
  const totalCount = summary.attempts.length;
  const correctPercentage = Math.round((correctCount / totalCount) * 100);
  
  const responseTimes = summary.attempts.map(a => a.responseTime);
  const avgResponseTime = responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length;
  
  const fastestTime = Math.min(...responseTimes);
  const slowestTime = Math.max(...responseTimes);
  
  // Get problem with highest weight (needs most practice)
  const highestWeightProblem = [...summary.problemWeights].sort((a, b) => b.weight - a.weight)[0];
  
  return {
    correctCount,
    totalCount,
    correctPercentage,
    avgResponseTime: Math.round(avgResponseTime),
    fastestTime: Math.round(fastestTime),
    slowestTime: Math.round(slowestTime),
    needsMostPractice: highestWeightProblem ? 
      `${highestWeightProblem.factor1} × ${highestWeightProblem.factor2}` : 
      'None'
  };
};

================
File: components/SessionSummary/utils/formatters.ts
================
// Utility functions for formatting data

/**
 * Format milliseconds to seconds with one decimal place
 */
export const formatTime = (ms: number): string => {
    return (ms / 1000).toFixed(1) + 's';
  };
  
  /**
   * Get color for response time comparison to average
   */
  export const getTimeComparisonColor = (actual: number, average: number | null): string => {
    if (!average) return 'text-gray-500';
    
    const diff = actual - average;
    const percentDiff = (diff / average) * 100;
    
    if (percentDiff < -20) return 'text-green-600'; // Much faster
    if (percentDiff < -5) return 'text-green-500'; // Faster
    if (percentDiff < 5) return 'text-gray-600'; // About average
    if (percentDiff < 20) return 'text-yellow-500'; // Slower
    return 'text-red-500'; // Much slower
  };
  
  /**
   * Get color based on weight relative to default weight (10)
   */
  export const getWeightColor = (weight: number): string => {
    const defaultWeight = 10; // Fixed default weight
    const maxIntensity = 0.9; // Maximum color intensity (0-1)
    
    if (weight === defaultWeight) return 'rgb(229, 231, 235)'; // gray-200 equivalent
    
    const diff = weight - defaultWeight;
    const normalizedDiff = Math.min(Math.abs(diff) / defaultWeight, 1);
    // Use logarithmic scale for better visualization of small differences
    const intensity = Math.min(maxIntensity * Math.log10(1 + normalizedDiff * 9), maxIntensity);
    
    if (diff > 0) {
      // Red spectrum for weights above default (needs more practice)
      return `rgba(239, 68, 68, ${intensity})`; // red-500 with variable opacity
    } else {
      // Green spectrum for weights below default (mastered)
      return `rgba(34, 197, 94, ${intensity})`; // green-500 with variable opacity
    }
  };
  
  /**
   * Calculate relative speed indicator position (0-100)
   */
  export const getSpeedPosition = (responseTime: number, averageTime: number | null): number => {
    if (!averageTime) return 50; // Center if no average
    const diff = responseTime - averageTime;
    const maxDiff = averageTime; // Use average as scale
    const position = 50 - (diff / maxDiff) * 50;
    return Math.max(5, Math.min(95, position)); // Keep within visible range
  };

================
File: components/SessionSummary/MasteryGrid.tsx
================
import React from 'react';
import { ProblemWeight } from '../../services/api';
import { getWeightColor } from './utils/formatters';

interface MasteryGridProps {
  problemWeights: ProblemWeight[];
}

const MasteryGrid: React.FC<MasteryGridProps> = ({ problemWeights }) => {
  return (
    <div className="bg-white rounded-xl shadow-md p-4 border border-gray-100">
      <h3 className="text-xl font-semibold text-gray-800 mb-2">Problem Mastery</h3>
      <p className="text-sm text-gray-600 mb-4">
        Lighter green indicates mastery. Darker red indicates need for practice.
      </p>
      
      <div className="grid grid-cols-10 gap-px bg-gray-100 p-2 rounded-lg">
        {/* Column headers */}
        <div className="text-center font-medium text-gray-600 p-1 bg-gray-50 rounded-sm">×</div>
        {[2,3,4,5,6,7,8,9,10].map(num => (
          <div key={num} className="text-center font-medium text-gray-600 p-1 bg-gray-50 rounded-sm">
            {num}
          </div>
        ))}
        
        {/* Grid rows */}
        {[2,3,4,5,6,7,8,9,10].map(row => (
          <React.Fragment key={row}>
            {/* Row header */}
            <div className="text-center font-medium text-gray-600 p-1 bg-gray-50 rounded-sm">
              {row}
            </div>
            
            {/* Cells */}
            {[2,3,4,5,6,7,8,9,10].map(col => {
              const weight = problemWeights.find(
                w => (w.factor1 === row && w.factor2 === col) ||
                     (w.factor1 === col && w.factor2 === row)
              );
              
              const cellColor = weight ? getWeightColor(weight.weight) : 'rgb(229, 231, 235)';
              const product = row * col;
              const tooltipText = `${row} × ${col} = ${product}${weight ? ` (weight: ${weight.weight})` : ' (no weight data)'}`;
              
              return (
                <div
                  key={`${row}-${col}`}
                  className="relative w-full pb-[100%] rounded-sm hover:opacity-75 transition-opacity cursor-help"
                  style={{ backgroundColor: cellColor }}
                  title={tooltipText}
                >
                  <div className="absolute inset-0 flex items-center justify-center text-xs font-medium text-gray-700">
                    {product}
                  </div>
                  
                  {weight && weight.weight > 15 && (
                    <div className="absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full" 
                         title="High priority for practice"/>
                  )}
                  
                  {weight && weight.weight < 5 && (
                    <div className="absolute bottom-0 right-0 h-2 w-2 bg-green-500 rounded-full"
                         title="Well mastered"/>
                  )}
                </div>
              );
            })}
          </React.Fragment>
        ))}
      </div>
      
      {/* Legend */}
      <div className="flex justify-center gap-6 mt-4 text-sm">
        <div className="flex items-center gap-1">
          <div className="w-3 h-3 rounded-sm" style={{ backgroundColor: getWeightColor(5) }}></div>
          <span>Mastered</span>
        </div>
        <div className="flex items-center gap-1">
          <div className="w-3 h-3 rounded-sm bg-gray-200"></div>
          <span>Average</span>
        </div>
        <div className="flex items-center gap-1">
          <div className="w-3 h-3 rounded-sm" style={{ backgroundColor: getWeightColor(15) }}></div>
          <span>Needs practice</span>
        </div>
      </div>
    </div>
  );
};

export default MasteryGrid;

================
File: components/SessionSummary/PerformanceInsights.tsx
================
import React from 'react';
import { SessionStats } from './utils/calculations';

interface PerformanceInsightsProps {
  stats: SessionStats;
}

const PerformanceInsights: React.FC<PerformanceInsightsProps> = ({ stats }) => {
  return (
    <div className="bg-white rounded-xl shadow-md p-4 border border-gray-100">
      <h3 className="text-xl font-semibold text-gray-800 mb-3">Performance Insights</h3>
      
      <ul className="space-y-2 pl-2">
        {/* Dynamically generated insights */}
        {stats.correctPercentage < 70 && (
          <li className="flex items-start gap-2 text-red-800 bg-red-50 p-2 rounded">
            <svg className="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <span>Accuracy below 70%. Focus on getting correct answers before speed.</span>
          </li>
        )}
        
        {stats.correctPercentage >= 90 && (
          <li className="flex items-start gap-2 text-green-800 bg-green-50 p-2 rounded">
            <svg className="w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>Great accuracy! Try improving your speed next.</span>
          </li>
        )}
        
        {stats.slowestTime > stats.avgResponseTime * 2 && (
          <li className="flex items-start gap-2 text-amber-800 bg-amber-50 p-2 rounded">
            <svg className="w-5 h-5 text-amber-600 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>Some problems take much longer than others. Practice consistency.</span>
          </li>
        )}
        
        <li className="flex items-start gap-2 text-blue-800 bg-blue-50 p-2 rounded">
          <svg className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>Focus practice on: <strong>{stats.needsMostPractice}</strong></span>
        </li>
      </ul>
    </div>
  );
};

export default PerformanceInsights;

================
File: components/SessionSummary/ProblemList.tsx
================
import React from 'react';
import { ProblemAttempt } from '../../services/api';
import { formatTime, getTimeComparisonColor, getSpeedPosition } from './utils/formatters';

interface ProblemListProps {
  attempts: ProblemAttempt[];
}

const ProblemList: React.FC<ProblemListProps> = ({ attempts }) => {
  return (
    <div className="bg-white rounded-xl shadow-md p-4 border border-gray-100">
      <h3 className="text-xl font-semibold text-gray-800 mb-4">Problems Attempted</h3>
      
      <div className="space-y-3 max-h-[400px] overflow-y-auto pr-2">
        {attempts.map((attempt, index) => {
          const correctAnswer = attempt.factor1 * attempt.factor2;
          const isCorrect = attempt.isCorrect;
          
          return (
            <div 
              key={index} 
              className={`
                flex items-center gap-4 p-3 rounded-lg border 
                ${isCorrect ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}
                transition-all hover:shadow-md
              `}
            >
              <div className="flex-shrink-0 w-7 h-7 flex items-center justify-center rounded-full bg-white border border-gray-200">
                <span className="text-sm font-medium text-gray-700">{index + 1}</span>
              </div>
              
              <div className="flex items-center gap-2 flex-1">
                <span className="text-lg font-medium whitespace-nowrap">
                  {attempt.factor1} × {attempt.factor2} =
                </span>
                
                {isCorrect ? (
                  <span className="text-lg font-semibold text-green-700">
                    {correctAnswer}
                  </span>
                ) : (
                  <div className="flex items-center gap-1">
                    <span className="text-lg font-semibold text-red-600 line-through">
                      {attempt.userAnswer}
                    </span>
                    <span className="text-gray-500 text-sm">(should be {correctAnswer})</span>
                  </div>
                )}
              </div>
              
              {/* Response time indicator */}
              <div className="flex-shrink-0">
                <div className="flex items-center gap-2">
                  <div className="text-right">
                    <div className={`text-sm font-medium ${getTimeComparisonColor(attempt.responseTime, attempt.averageTime)}`}>
                      {formatTime(attempt.responseTime)}
                    </div>
                    
                    {attempt.averageTime && (
                      <div className="text-xs text-gray-500">
                        {attempt.responseTime < attempt.averageTime ? 'Faster' : 'Slower'} than avg
                      </div>
                    )}
                  </div>
                  
                  {/* Speed gauge */}
                  <div 
                    className="relative w-16 h-3 bg-gray-200 rounded-full overflow-hidden flex-shrink-0"
                    title={`Response time: ${formatTime(attempt.responseTime)}${attempt.averageTime ? `, Average: ${formatTime(attempt.averageTime)}` : ''}`}
                  >
                    {attempt.averageTime && (
                      <div 
                        className="absolute top-0 bottom-0 w-0.5 bg-gray-600"
                        style={{ left: '50%' }}
                      />
                    )}
                    <div
                      className={`absolute top-0 bottom-0 w-2 rounded-full ${
                        attempt.responseTime < (attempt.averageTime || attempt.responseTime) 
                          ? 'bg-green-500' 
                          : 'bg-red-500'
                      }`}
                      style={{
                        left: `${getSpeedPosition(attempt.responseTime, attempt.averageTime)}%`,
                        transform: 'translateX(-50%)'
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default ProblemList;

================
File: components/SessionSummary/SessionSummary.tsx
================
import React, { useMemo } from 'react';
import { SessionSummary as SessionSummaryType } from '../../services/api';
import StatsSummary from './StatsSummary';
import ProblemList from './ProblemList';
import MasteryGrid from './MasteryGrid';
import PerformanceInsights from './PerformanceInsights';
import { calculateSessionStats } from './utils/calculations';

interface Props {
  summary: SessionSummaryType;
  className?: string;
}

/**
 * SessionSummary component shows a comprehensive summary of an exercise session
 * including statistics, problem list, mastery grid, and performance insights.
 */
const SessionSummary: React.FC<Props> = ({ summary, className = '' }) => {
  // Calculate summary statistics
  const stats = useMemo(() => calculateSessionStats(summary), [summary]);

  return (
    <div className={`grid grid-cols-1 lg:grid-cols-2 gap-8 w-full max-w-6xl mx-auto p-4 ${className}`}>
      {/* Left Column: Stats and Problem List */}
      <div className="space-y-6">
        <StatsSummary stats={stats} />
        <ProblemList attempts={summary.attempts} />
      </div>

      {/* Right Column: Multiplication Grid and Insights */}
      <div className="space-y-6">
        <MasteryGrid problemWeights={summary.problemWeights} />
        <PerformanceInsights stats={stats} />
      </div>
    </div>
  );
};

export default SessionSummary;

================
File: components/SessionSummary/StatsSummary.tsx
================
import React from 'react';
import { SessionStats } from './utils/calculations';
import { formatTime } from './utils/formatters';

interface StatsSummaryProps {
  stats: SessionStats;
}

const StatsSummary: React.FC<StatsSummaryProps> = ({ stats }) => {
  return (
    <div className="bg-white rounded-xl shadow-md p-4 border border-gray-100">
      <h3 className="text-xl font-semibold text-gray-800 mb-4">Session Statistics</h3>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="bg-blue-50 rounded-lg p-3">
          <div className="text-sm text-blue-600 font-medium">Accuracy</div>
          <div className="flex items-end gap-1 mt-1">
            <span className="text-2xl font-bold text-blue-800">{stats.correctPercentage}%</span>
            <span className="text-sm text-blue-600 font-medium mb-0.5">
              ({stats.correctCount}/{stats.totalCount})
            </span>
          </div>
        </div>
        
        <div className="bg-purple-50 rounded-lg p-3">
          <div className="text-sm text-purple-600 font-medium">Avg Response</div>
          <div className="flex items-end gap-1 mt-1">
            <span className="text-2xl font-bold text-purple-800">{formatTime(stats.avgResponseTime)}</span>
          </div>
        </div>
        
        <div className="bg-green-50 rounded-lg p-3">
          <div className="text-sm text-green-600 font-medium">Fastest</div>
          <div className="text-2xl font-bold text-green-800">{formatTime(stats.fastestTime)}</div>
        </div>
        
        <div className="bg-amber-50 rounded-lg p-3">
          <div className="text-sm text-amber-600 font-medium">Needs Practice</div>
          <div className="text-2xl font-bold text-amber-800">{stats.needsMostPractice}</div>
        </div>
      </div>
    </div>
  );
};

export default StatsSummary;

================
File: context/ExerciseContext/ExerciseContext.tsx
================
import React, { createContext, useReducer, useCallback, useEffect, useMemo } from 'react';
import { ExerciseState, ExerciseAction, ExerciseContextValue, ExerciseProviderProps, Problem } from './types';

const LOCAL_STORAGE_KEY = 'exerciseState';

const generateProblem = (minFactor: number, maxFactor: number, previousProblems: Problem[] = []): Problem => {
  let factor1: number, factor2: number;
  do {
    factor1 = Math.floor(Math.random() * (maxFactor - minFactor + 1)) + minFactor;
    factor2 = Math.floor(Math.random() * (maxFactor - minFactor + 1)) + minFactor;
  } while (
    previousProblems.length > 0 &&
    previousProblems[previousProblems.length - 1].factor1 === factor1 &&
    previousProblems[previousProblems.length - 1].factor2 === factor2
  );

  return {
    factor1,
    factor2,
    answer: factor1 * factor2
  };
};

const generateProblems = (count: number, minFactor: number, maxFactor: number): Problem[] => {
  const problems: Problem[] = [];
  for (let i = 0; i < count; i++) {
    problems.push(generateProblem(minFactor, maxFactor, problems));
  }
  return problems;
};

const createInitialState = (numberOfProblems: number, minFactor: number, maxFactor: number): ExerciseState => {
  return {
    problems: generateProblems(numberOfProblems, minFactor, maxFactor),
    currentIndex: 0,
    currentAnswer: '',
    isComplete: false,
    isPaused: false,
    isRetryMode: false,
    results: new Array(numberOfProblems).fill(null),
    startTime: Date.now(),
    problemStartTime: Date.now()
  };
};

const exerciseReducer = (state: ExerciseState, action: ExerciseAction): ExerciseState => {
  switch (action.type) {
    case 'SET_ANSWER':
      return {
        ...state,
        currentAnswer: action.payload
      };

    case 'SUBMIT_ANSWER': {
      const currentProblem = state.problems[state.currentIndex];
      const isCorrect = parseInt(state.currentAnswer) === currentProblem.answer;
      const newResults = [...state.results];
      newResults[state.currentIndex] = isCorrect;
      
      return {
        ...state,
        results: newResults,
        isRetryMode: !isCorrect,
        currentAnswer: '',
        isComplete: state.currentIndex === state.problems.length - 1 && isCorrect,
        problemStartTime: Date.now()
      };
    }

    case 'NEXT_PROBLEM': {
      const nextIndex = state.currentIndex + 1;
      return {
        ...state,
        currentIndex: Math.min(nextIndex, state.problems.length - 1),
        currentAnswer: '',
        isRetryMode: false,
        problemStartTime: Date.now()
      };
    }

    case 'TOGGLE_PAUSE':
      return {
        ...state,
        isPaused: !state.isPaused,
        problemStartTime: !state.isPaused ? Date.now() : state.problemStartTime
      };

    case 'RESTART_EXERCISE':
      return {
        ...state,
        currentIndex: 0,
        currentAnswer: '',
        isComplete: false,
        isPaused: false,
        isRetryMode: false,
        results: new Array(state.problems.length).fill(null),
        startTime: Date.now(),
        problemStartTime: Date.now()
      };

    default:
      return state;
  }
};

export const ExerciseContext = createContext<ExerciseContextValue | null>(null);

if (process.env.NODE_ENV === 'development') {
  ExerciseContext.displayName = 'ExerciseContext';
}

export const ExerciseProvider: React.FC<ExerciseProviderProps> = ({
  numberOfProblems,
  minFactor = 2,
  maxFactor = 10,
  children
}) => {
  const [state, dispatch] = useReducer(
    exerciseReducer,
    { numberOfProblems, minFactor, maxFactor },
    () => {
      const savedState = localStorage.getItem(LOCAL_STORAGE_KEY);
      if (savedState) {
        const parsedState = JSON.parse(savedState);
        if (!parsedState.isComplete) {
          return {
            ...parsedState,
            startTime: Date.now(),
            problemStartTime: Date.now()
          };
        }
      }
      return createInitialState(numberOfProblems, minFactor, maxFactor);
    }
  );

  useEffect(() => {
    if (state.isComplete) {
      localStorage.removeItem(LOCAL_STORAGE_KEY);
    } else {
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));
    }
  }, [state]);

  const setAnswer = useCallback((value: string) => {
    dispatch({ type: 'SET_ANSWER', payload: value });
  }, []);

  const submitAnswer = useCallback(() => {
    dispatch({ type: 'SUBMIT_ANSWER' });
  }, []);

  const nextProblem = useCallback(() => {
    dispatch({ type: 'NEXT_PROBLEM' });
  }, []);

  const togglePause = useCallback(() => {
    dispatch({ type: 'TOGGLE_PAUSE' });
  }, []);

  const restartExercise = useCallback(() => {
    dispatch({ type: 'RESTART_EXERCISE' });
  }, []);

  const contextValue = useMemo<ExerciseContextValue>(() => {
    // Get current time inside the memo to ensure it updates
    const now = Date.now();
    return {
      state,
      setAnswer,
      submitAnswer,
      nextProblem,
      togglePause,
      restartExercise,
      isLastProblem: state.currentIndex === state.problems.length - 1,
      currentProblem: state.problems[state.currentIndex],
      percentComplete: (state.results.filter(result => result !== null).length / state.problems.length) * 100,
      timeElapsed: now - state.startTime
    };
  }, [
    state,
    setAnswer,
    submitAnswer,
    nextProblem,
    togglePause,
    restartExercise
  ]);

  return (
    <ExerciseContext.Provider value={contextValue}>
      {children}
    </ExerciseContext.Provider>
  );
};

================
File: context/ExerciseContext/types.ts
================
export interface Problem {
  factor1: number;
  factor2: number;
  answer: number;
}

export interface ExerciseState {
  problems: Problem[];
  currentIndex: number;
  currentAnswer: string;
  isComplete: boolean;
  isPaused: boolean;
  isRetryMode: boolean;
  results: boolean[];
  startTime: number;
  problemStartTime: number;
}

export type ExerciseAction =
  | { type: 'SET_ANSWER'; payload: string }
  | { type: 'SUBMIT_ANSWER' }
  | { type: 'NEXT_PROBLEM' }
  | { type: 'TOGGLE_PAUSE' }
  | { type: 'RESTART_EXERCISE' };

export interface ExerciseContextValue {
  state: ExerciseState;
  setAnswer: (value: string) => void;
  submitAnswer: () => void;
  nextProblem: () => void;
  togglePause: () => void;
  restartExercise: () => void;
  isLastProblem: boolean;
  currentProblem: Problem;
  percentComplete: number;
  timeElapsed: number;
}

export interface ExerciseProviderProps {
  numberOfProblems: number;
  minFactor?: number;
  maxFactor?: number;
  children: React.ReactNode;
}

================
File: context/ExerciseContext/useExercise.ts
================
import { useContext } from 'react';
import { ExerciseContext } from './ExerciseContext';
import { ExerciseContextValue } from './types';

export const useExercise = (): ExerciseContextValue => {
  const context = useContext(ExerciseContext);
  
  if (!context) {
    throw new Error(
      'useExercise must be used within an ExerciseProvider. ' +
      'Wrap a parent component in <ExerciseProvider> to fix this error.'
    );
  }
  
  return context;
};

// Export the provider for convenience
export { ExerciseProvider } from './ExerciseContext';

================
File: services/api.ts
================
export interface User {
  id: number;
  name: string;
  is_parent: boolean;
}

export interface ExerciseSession {
  id: number;
  user_id: number;
  total_problems: number;
  completed_problems: number;
  is_completed: boolean;
  start_time: string;
  end_time?: string;
}

export interface Problem {
  problemId: number;
  factor1: number;
  factor2: number;
}

export interface ProblemAttempt {
  factor1: number;
  factor2: number;
  isCorrect: boolean;
  responseTime: number;
  averageTime: number | null;
  userAnswer?: number;
}

export interface ProblemWeight {
  factor1: number;
  factor2: number;
  weight: number;
}

export interface SessionSummary {
  attempts: ProblemAttempt[];
  problemWeights: ProblemWeight[];
}

export interface AttemptResult {
  isCorrect: boolean;
  correctAnswer: number;
  isSessionComplete: boolean;
  sessionSummary?: SessionSummary;
}

const API_BASE_URL = 'http://localhost:3001/api';

export const api = {
  // Users
  async getUsers(): Promise<User[]> {
    const response = await fetch(`${API_BASE_URL}/users`);
    if (!response.ok) {
      throw new Error('Failed to fetch users');
    }
    return response.json();
  },

  // Sessions
  async createSession(userId: number, totalProblems: number): Promise<ExerciseSession> {
    const response = await fetch(`${API_BASE_URL}/sessions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ userId, totalProblems }),
    });
    if (!response.ok) {
      throw new Error('Failed to create session');
    }
    return response.json();
  },

  async getNextProblem(sessionId: number): Promise<Problem> {
    const response = await fetch(`${API_BASE_URL}/sessions/${sessionId}/problems/next`);
    if (!response.ok) {
      throw new Error('Failed to fetch next problem');
    }
    return response.json();
  },

  async getSession(sessionId: number): Promise<ExerciseSession> {
    const response = await fetch(`${API_BASE_URL}/sessions/${sessionId}`);
    if (!response.ok) {
      throw new Error('Failed to fetch session');
    }
    return response.json();
  },

  async submitAttempt(
    sessionId: number,
    problemId: number,
    answer: number,
    responseTimeMs: number
  ): Promise<AttemptResult> {
    const response = await fetch(`${API_BASE_URL}/sessions/${sessionId}/attempts`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ problemId, answer, responseTimeMs }),
    });
    if (!response.ok) {
      throw new Error('Failed to submit attempt');
    }
    return response.json();
  },
};

================
File: test/setup.ts
================
import '@testing-library/jest-dom'

================
File: types/index.ts
================
export interface Problem {
  id: string;
  factor1: number;
  factor2: number;
  answer?: number;
  isCorrect?: boolean;
  timeSpent?: number;
}

export interface User {
  id: string;
  name: string;
  isParent: boolean;
}

================
File: App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: App.tsx
================
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import LandingPage from './components/LandingPage/LandingPage';
import Exercise from './components/Exercise/Exercise';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<LandingPage />} />
        <Route 
          path="/exercise/:sessionId" 
          element={<Exercise />} 
        />
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;

================
File: index.css
================
@import "tailwindcss";
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: system-ui, -apple-system, sans-serif;
  line-height: 1.5;
  font-weight: 400;
}

html {
  overflow: hidden;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
  overflow: auto;
}

#root {
  width: 100%;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

================
File: main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: vite-env.d.ts
================
/// <reference types="vite/client" />



================================================================
End of Codebase
================================================================
